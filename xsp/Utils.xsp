%module{Boost::Geometry::Utils};
%package{Boost::Geometry::Utils};

%{
#include <myinit.h>

PROTOTYPES: DISABLE

opolygon*
_polygon(my_polygon)
    polygon* my_polygon
  CODE:
    RETVAL = my_polygon;
  OUTPUT:
    RETVAL

polygon*
_polygon_arrayref(my_polygon)
    opolygon* my_polygon
  CODE:
    RETVAL = my_polygon;
  OUTPUT:
    RETVAL

omultilinestring*
_multi_linestring(my_multi_linestring)
    multi_linestring* my_multi_linestring
  CODE:
    RETVAL = my_multi_linestring;
  OUTPUT:
    RETVAL

opolygon*
_read_wkt_polygon(wkt)
    std::string& wkt
  CODE:
    RETVAL = new polygon ();
    boost::geometry::read_wkt(wkt, *RETVAL);
  OUTPUT:
    RETVAL

omultilinestring*
_read_wkt_linestring(wkt)
    std::string& wkt
  CODE:
    RETVAL = new multi_linestring ();
    boost::geometry::read_wkt(wkt, *RETVAL);
  OUTPUT:
    RETVAL

multi_linestring*
polygon_linestring_intersection(my_polygon, my_linestring)
    opolygon* my_polygon
    omultilinestring* my_linestring
  CODE:
    RETVAL = new multi_linestring ();
    boost::geometry::intersection(*my_polygon, *my_linestring, *RETVAL);
  OUTPUT:
    RETVAL

std::string
_polygon_to_wkt(my_polygon)
    opolygon* my_polygon
  CODE:
    std::ostringstream output;
    output << boost::geometry::wkt(*my_polygon);
    RETVAL = output.str();
  OUTPUT:
    RETVAL

std::string
_multilinestring_to_wkt(mls)
    omultilinestring* mls
  CODE:
    std::ostringstream output;
    output << boost::geometry::wkt(*mls);
    RETVAL = output.str();
  OUTPUT:
    RETVAL

multi_linestring*
polygon_multi_linestring_intersection(my_polygon, my_linestring)
    polygon* my_polygon
    multi_linestring* my_linestring
  CODE:
    RETVAL = new multi_linestring ();
    boost::geometry::intersection(*my_polygon, *my_linestring, *RETVAL);
    delete my_polygon; // TODO: not sure if this is best place for this
    delete my_linestring; // TODO: not sure if this is best place for this
  OUTPUT:
    RETVAL

int
point_within_polygon(my_point_xy, my_polygon)
    point_xy* my_point_xy
    polygon* my_polygon
  CODE:
    RETVAL = boost::geometry::within(*my_point_xy, *my_polygon);
    delete my_polygon; // TODO: not sure if this is best place for this
    delete my_point_xy; // TODO: not sure if this is best place for this
  OUTPUT:
    RETVAL

int
point_covered_by_polygon(my_point_xy, my_polygon)
    point_xy* my_point_xy
    polygon* my_polygon
  CODE:
    RETVAL = boost::geometry::covered_by(*my_point_xy, *my_polygon);
    delete my_polygon; // TODO: not sure if this is best place for this
    delete my_point_xy; // TODO: not sure if this is best place for this
  OUTPUT:
    RETVAL

linestring*
linestring_simplify(my_linestring, tolerance)
    linestring* my_linestring
    const double tolerance
  CODE:
    RETVAL = new linestring ();
    boost::geometry::simplify(*my_linestring, *RETVAL, tolerance);
    delete my_linestring; // TODO: not sure if this is best place for this
  OUTPUT:
    RETVAL

multi_linestring*
polygon_voronoi(my_polygon)
    polygon* my_polygon
  CODE:

    // We should return something richer than linestrings.
    RETVAL = new multi_linestring();

    // We use the existing polygon* typemap, then convert from polygon rings to 
    // lists of segments. Would be better to go directly from perl to segments.
    std::vector<boost::polygon::segment_data<double> > segments;

    // load polygon holes into segment list first
    BOOST_FOREACH(ring r, my_polygon->inners()) { ring2segments(r, segments); }

    // Note the index at the end of the hole segment list.
    // This lets us filter out Voronoi edges inside holes, because
    // they will all reference source segments below this index number.
    int start_contour_index = (int) segments.size();

    // Load outer polygon contour in to segments list.
    ring2segments(my_polygon->outer(), segments);

    // Generate the Voronoi Dieagram
    boost::polygon::voronoi_diagram<double> vd;
    construct_voronoi(segments.begin(), segments.end(), &vd);

    // Selectively extract geometry from the Voronoi diagram graph structure.
    primary_voronoi_edges_polygon(vd, RETVAL, segments, start_contour_index);

  OUTPUT:
    RETVAL
%}
